{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Odatafy Documentation","text":"<p>This page contains the documentation for the odatafy ecosystem. It focuses on the core module, odatafy-parser, and gives an overview over the plugins, which are documented in their respective README files.</p>"},{"location":"#what-is-odatafy","title":"What is odatafy?","text":"<p>Odatafy is an ecosystem of npm modules that aim to help you create oDatav4 compatible REST-APIs, thus allowing you to accelerate development and save time and money by helping you to implement an API that is based on the very-well established oData v4 standard.</p>"},{"location":"#how-does-odatafy-work","title":"How does odatafy work?","text":"<p>The odatafy ecosystem is composed mainly of three parts: the core, plugins and examples.</p>"},{"location":"#the-core","title":"The core","text":"<p>The core is the odatafy-parser npm module, which is a parser consisting of multiple peg.js grammars working together to parse an oData v4 URL and translate it into an Abstract Syntax Tree (AST). The structure of this AST is documented in the oDataParseResult section of our typedoc documentation. Now you could use the core on its own and program a translator for database queries on top of the AST. Luckily, we already did this for you by offering Plugins. </p>"},{"location":"#plugins","title":"Plugins","text":"<p>Plugins are the most essential part of developing an application with odatafy. Plugins are npm packages built on top of the AST, that the odatafy-parser provides. Currently, we are maintaining two plugins: * odatafy-mongodb: Convert odata v4 requests to MongoDB Aggregation Queries with the <code>parseODataUrl()</code> function * odatafy-mongoose: Effortlessly generate Service Metadata Files and Expand Mappings for odatafy-mongodb from mongoose schemas</p>"},{"location":"#examples","title":"Examples","text":"<p>Finally, to bring it all together, we have created a few applications using the odatafy ecosystem for you to play around with and to guide you through using odatafy in your application. - odatafy-mongodb-example: A simple RESTful API leveraging all available plugins. Feel free to try out some odata queries here!</p>"},{"location":"#what-are-odatafy-plugins","title":"What are odatafy plugins?","text":"<p>plugins are the most essential part of developing an application with odatafy. They are installed as npm packages and help you to adapt odatafy to your use-case. One example is the odatafy-mongodb plugin which uses the core odatafy-parser to convert oData URLs to MongoDB queries.</p>"},{"location":"feature-support/","title":"odatafy MongoDB documentation","text":""},{"location":"feature-support/#feature-support","title":"Feature Support","text":"<p> Supported</p> <p> Partially Supported</p> <p> (Currently) Not Supported</p>"},{"location":"feature-support/#query-options","title":"Query Options","text":""},{"location":"feature-support/#select","title":"$select","text":""},{"location":"feature-support/#expand","title":"$expand","text":""},{"location":"feature-support/#compute","title":"$compute","text":""},{"location":"feature-support/#filter","title":"$filter","text":""},{"location":"feature-support/#orderby","title":"$orderby","text":""},{"location":"feature-support/#top","title":"$top","text":""},{"location":"feature-support/#skip","title":"$skip","text":""},{"location":"feature-support/#count","title":"$count","text":""},{"location":"feature-support/#search","title":"$search","text":""},{"location":"feature-support/#types","title":"Types","text":""},{"location":"feature-support/#logical-operators","title":"Logical Operators","text":""},{"location":"feature-support/#comparison","title":"Comparison","text":"<p> eq (Equals)  ne (Not Equals)  gt (Greater Than)  lt (Less Than)  </p>"},{"location":"feature-support/#logical-experssions","title":"Logical Experssions","text":"<p> and (Logical and)  or (Logical or)  not (Logical not)  </p>"},{"location":"feature-support/#other","title":"Other","text":"<p> has (Has operator)  in (In operator)  </p>"},{"location":"feature-support/#arithmetic-operators","title":"Arithmetic Operators","text":""},{"location":"feature-support/#addition","title":"Addition","text":"<p> add (Numeric Types)  add (Date Types)  </p>"},{"location":"feature-support/#subtraction","title":"Subtraction","text":"<p> sub (Numeric Types)  sub (Date Types)  </p>"},{"location":"feature-support/#multiplication","title":"Multiplication","text":"<p> mul (Numeric Types)  mul (Date Types)  </p>"},{"location":"feature-support/#division","title":"Division","text":"<p> div (Numeric Types)  div (Date Types)  divby (Numeric Types)  mod (Numeric Types)  </p>"},{"location":"feature-support/#negation","title":"Negation","text":"<p> - (Numeric Types)  </p>"},{"location":"feature-support/#grouping-with-parentheses","title":"Grouping with parentheses","text":"<p> Grouping with parenthesis</p>"},{"location":"feature-support/#string-and-collection-functions","title":"String and Collection Functions","text":""},{"location":"feature-support/#concat","title":"concat","text":"<p> concat(String, String)  concat(Collection, Collection)  </p>"},{"location":"feature-support/#contains","title":"contains","text":"<p> contains(String, String)  contains(Collection, Collection)  </p>"},{"location":"feature-support/#endswith","title":"endswith","text":"<p> endswith(String, String)  endswith(Collection, Collection)  </p>"},{"location":"feature-support/#indexof","title":"indexof","text":"<p> indexof(String, String)  indexof(Collection, Collection)  </p>"},{"location":"feature-support/#length","title":"length","text":"<p> length(Edm.String)  length(Collection)  </p>"},{"location":"feature-support/#startswith","title":"startswith","text":"<p> startswith(String, String)  startswith(Collection, Collection)  </p>"},{"location":"feature-support/#substring","title":"substring","text":"<p> substring(String, Number)  substring(String, Number, Number)  substring(Collection, Number)  substring(Collection, Number, Number)  </p>"},{"location":"feature-support/#collection-functions","title":"Collection Functions","text":"<p> hassubset(Collection, Collection)  hassubsequence(Collection, Collection)  </p>"},{"location":"feature-support/#string-functions","title":"String Functions","text":"<p> matchesPattern(String, String)  tolower(String)  toupper(String)  trim(String)  </p>"},{"location":"feature-support/#date-and-time-functions","title":"Date and Time Functions","text":"<p> date(Datetime)  year(Date)  year(Datetime)  month(Date)  month(Datetime)  day(Date)  day(Datetime)  time(Date)  time(Datetime)  hour(Date)  hour(Datetime)  minute(Datetime)  second(Datetime)  fractionalseconds(Datetime)  totaloffsetminutes(Datetime)  totalseconds(Datetime)  maxdatetime()  now()  mindatetime()  </p>"},{"location":"feature-support/#arithmetic-functions","title":"Arithmetic Functions","text":"<p> ceiling(Number)  floor(Number)  round(Number)  </p>"},{"location":"feature-support/#type-functions","title":"Type Functions","text":"<p> cast(Type)  cast(Expression, Type)  isof(Type)  isof(Expression, Type)  </p>"},{"location":"feature-support/#geo-functions","title":"Geo Functions","text":""},{"location":"feature-support/#geodistance","title":"geo.distance","text":"<p> geo.distance(GeographyPoint, GeographyPoint)  geo.distance(GeometryPoint, GeometryPoint)  </p>"},{"location":"feature-support/#geointersects","title":"geo.intersects","text":"<p> geo.intersects(GeographyPoint, GeographyPolygon)  geo.intersects(GeometryPoint, GeometryPolygon)  </p>"},{"location":"feature-support/#geolength","title":"geo.length","text":"<p> geo.length(GeographyLineString)  geo.length(GeometryLineString)  </p>"},{"location":"feature-support/#conditional-functions","title":"Conditional Functions","text":"<p> case(Edm.Boolean:expression, ..., Edm.Boolean:expression)  </p>"},{"location":"feature-support/#lambda-operators","title":"Lambda Operators","text":"<p> any(Symbol:Edm.Boolean:expression)  all(Symbol:Edm.Boolean:expression)  </p>"},{"location":"plugins/","title":"odatafy plugins","text":"<p>This page provides a list of all Plugin, that are available for odatafy:</p> Name Description Repo Documentation odatafy-mongodb Convert oData Requests to MongoDB aggregation queries []https://github.com/Gang-of-Fork/odatafy-mongodb"}]}