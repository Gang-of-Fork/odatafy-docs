{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Official odatafy documentation This is the official odatafy documentation, it contains information about all odatafy realted repositories. odatafy and its plugins are currently deleoped as an npm package. What is odatafy? odatafy is an ecosystem of npm modules that aim to help you create oData compatible REST-APIs, thus allowing you to accelerate development and safe time and money by helping you to implement an API that is based on the very-well established oData standard. What are odatafy plugins? plugins are the most essential part of developing an application with odatafy. They are installed as npm packages and help you to adapt odatafy to your use-case. One example is the odatafy-mongodb plugin which uses the core odatafy-parser to convert oData URLs to MongoDB queries.","title":"Home"},{"location":"#official-odatafy-documentation","text":"This is the official odatafy documentation, it contains information about all odatafy realted repositories. odatafy and its plugins are currently deleoped as an npm package.","title":"Official odatafy documentation"},{"location":"#what-is-odatafy","text":"odatafy is an ecosystem of npm modules that aim to help you create oData compatible REST-APIs, thus allowing you to accelerate development and safe time and money by helping you to implement an API that is based on the very-well established oData standard.","title":"What is odatafy?"},{"location":"#what-are-odatafy-plugins","text":"plugins are the most essential part of developing an application with odatafy. They are installed as npm packages and help you to adapt odatafy to your use-case. One example is the odatafy-mongodb plugin which uses the core odatafy-parser to convert oData URLs to MongoDB queries.","title":"What are odatafy plugins?"},{"location":"faq/","text":"","title":"FAQ"},{"location":"feature-support/","text":"odatafy MongoDB documentation Feature Support Supported Partially Supported (Currently) Not Supported Query Options $select $expand $compute $filter $orderby $top $skip $count $search Types Logical Operators Comparison :white_check_mark: eq (Equals) :white_check_mark: ne (Not Equals) :white_check_mark: gt (Greater Than) :white_check_mark: lt (Less Than) Logical Experssions :white_check_mark: and (Logical and) :white_check_mark: or (Logical or) :white_check_mark: not (Logical not) Other :red_circle: has (Has operator) :red_circle: in (In operator) Arithmetic Operators Addition :white_check_mark: add (Numeric Types) :large_orange_diamond: add (Date Types) Subtraction :white_check_mark: sub (Numeric Types) :large_orange_diamond: sub (Date Types) Multiplication :white_check_mark: mul (Numeric Types) :red_circle: mul (Date Types) Division :white_check_mark: div (Numeric Types) :red_circle: div (Date Types) :white_check_mark: divby (Numeric Types) :white_check_mark: mod (Numeric Types) Negation :white_check_mark: - (Numeric Types) Grouping with parentheses :white_check_mark: Grouping with parenthesis String and Collection Functions concat :white_check_mark: concat(String, String) :white_check_mark: concat(Collection, Collection) contains :white_check_mark: contains(String, String) :white_check_mark: contains(Collection, Collection) endswith :white_check_mark: endswith(String, String) :red_circle: endswith(Collection, Collection) indexof :red_circle: indexof(String, String) :red_circle: indexof(Collection, Collection) length :white_check_mark: length(Edm.String) :white_check_mark: length(Collection) startswith :white_check_mark: startswith(String, String) :red_circle: startswith(Collection, Collection) substring :red_circle: substring(String, Number) :red_circle: substring(String, Number, Number) :red_circle: substring(Collection, Number) :red_circle: substring(Collection, Number, Number) Collection Functions :red_circle: hassubset(Collection, Collection) :red_circle: hassubsequence(Collection, Collection) String Functions :white_check_mark: matchesPattern(String, String) :white_check_mark: tolower(String) :white_check_mark: toupper(String) :white_check_mark: trim(String) Date and Time Functions :red_circle: date(Datetime) :white_check_mark: year(Date) :white_check_mark: year(Datetime) :white_check_mark: month(Date) :white_check_mark: month(Datetime) :white_check_mark: day(Date) :white_check_mark: day(Datetime) :red_circle: time(Date) :red_circle: time(Datetime) :white_check_mark: hour(Date) :white_check_mark: hour(Datetime) :white_check_mark: minute(Datetime) :white_check_mark: second(Datetime) :white_check_mark: fractionalseconds(Datetime) :red_circle: totaloffsetminutes(Datetime) :red_circle: totalseconds(Datetime) :white_check_mark: maxdatetime() :white_check_mark: now() :white_check_mark: mindatetime() Arithmetic Functions :white_check_mark: ceiling(Number) :white_check_mark: floor(Number) :white_check_mark: round(Number) Type Functions :red_circle: cast(Type) :large_orange_diamond: cast(Expression, Type) :red_circle: isof(Type) :red_circle: isof(Expression, Type) Geo Functions geo.distance :red_circle: geo.distance(GeographyPoint, GeographyPoint) :red_circle: geo.distance(GeometryPoint, GeometryPoint) geo.intersects :red_circle: geo.intersects(GeographyPoint, GeographyPolygon) :red_circle: geo.intersects(GeometryPoint, GeometryPolygon) geo.length :red_circle: geo.length(GeographyLineString) :red_circle: geo.length(GeometryLineString) Conditional Functions :red_circle: case(Edm.Boolean:expression, ..., Edm.Boolean:expression) Lambda Operators :red_circle: any(Symbol:Edm.Boolean:expression) :red_circle: all(Symbol:Edm.Boolean:expression)","title":"Feature-Support"},{"location":"feature-support/#odatafy-mongodb-documentation","text":"","title":"odatafy MongoDB documentation"},{"location":"feature-support/#feature-support","text":"Supported Partially Supported (Currently) Not Supported","title":"Feature Support"},{"location":"feature-support/#query-options","text":"","title":"Query Options"},{"location":"feature-support/#select","text":"","title":"$select"},{"location":"feature-support/#expand","text":"","title":"$expand"},{"location":"feature-support/#compute","text":"","title":"$compute"},{"location":"feature-support/#filter","text":"","title":"$filter"},{"location":"feature-support/#orderby","text":"","title":"$orderby"},{"location":"feature-support/#top","text":"","title":"$top"},{"location":"feature-support/#skip","text":"","title":"$skip"},{"location":"feature-support/#count","text":"","title":"$count"},{"location":"feature-support/#search","text":"","title":"$search"},{"location":"feature-support/#types","text":"","title":"Types"},{"location":"feature-support/#logical-operators","text":"","title":"Logical Operators"},{"location":"feature-support/#comparison","text":":white_check_mark: eq (Equals) :white_check_mark: ne (Not Equals) :white_check_mark: gt (Greater Than) :white_check_mark: lt (Less Than)","title":"Comparison"},{"location":"feature-support/#logical-experssions","text":":white_check_mark: and (Logical and) :white_check_mark: or (Logical or) :white_check_mark: not (Logical not)","title":"Logical Experssions"},{"location":"feature-support/#other","text":":red_circle: has (Has operator) :red_circle: in (In operator)","title":"Other"},{"location":"feature-support/#arithmetic-operators","text":"","title":"Arithmetic Operators"},{"location":"feature-support/#addition","text":":white_check_mark: add (Numeric Types) :large_orange_diamond: add (Date Types)","title":"Addition"},{"location":"feature-support/#subtraction","text":":white_check_mark: sub (Numeric Types) :large_orange_diamond: sub (Date Types)","title":"Subtraction"},{"location":"feature-support/#multiplication","text":":white_check_mark: mul (Numeric Types) :red_circle: mul (Date Types)","title":"Multiplication"},{"location":"feature-support/#division","text":":white_check_mark: div (Numeric Types) :red_circle: div (Date Types) :white_check_mark: divby (Numeric Types) :white_check_mark: mod (Numeric Types)","title":"Division"},{"location":"feature-support/#negation","text":":white_check_mark: - (Numeric Types)","title":"Negation"},{"location":"feature-support/#grouping-with-parentheses","text":":white_check_mark: Grouping with parenthesis","title":"Grouping with parentheses"},{"location":"feature-support/#string-and-collection-functions","text":"","title":"String and Collection Functions"},{"location":"feature-support/#concat","text":":white_check_mark: concat(String, String) :white_check_mark: concat(Collection, Collection)","title":"concat"},{"location":"feature-support/#contains","text":":white_check_mark: contains(String, String) :white_check_mark: contains(Collection, Collection)","title":"contains"},{"location":"feature-support/#endswith","text":":white_check_mark: endswith(String, String) :red_circle: endswith(Collection, Collection)","title":"endswith"},{"location":"feature-support/#indexof","text":":red_circle: indexof(String, String) :red_circle: indexof(Collection, Collection)","title":"indexof"},{"location":"feature-support/#length","text":":white_check_mark: length(Edm.String) :white_check_mark: length(Collection)","title":"length"},{"location":"feature-support/#startswith","text":":white_check_mark: startswith(String, String) :red_circle: startswith(Collection, Collection)","title":"startswith"},{"location":"feature-support/#substring","text":":red_circle: substring(String, Number) :red_circle: substring(String, Number, Number) :red_circle: substring(Collection, Number) :red_circle: substring(Collection, Number, Number)","title":"substring"},{"location":"feature-support/#collection-functions","text":":red_circle: hassubset(Collection, Collection) :red_circle: hassubsequence(Collection, Collection)","title":"Collection Functions"},{"location":"feature-support/#string-functions","text":":white_check_mark: matchesPattern(String, String) :white_check_mark: tolower(String) :white_check_mark: toupper(String) :white_check_mark: trim(String)","title":"String Functions"},{"location":"feature-support/#date-and-time-functions","text":":red_circle: date(Datetime) :white_check_mark: year(Date) :white_check_mark: year(Datetime) :white_check_mark: month(Date) :white_check_mark: month(Datetime) :white_check_mark: day(Date) :white_check_mark: day(Datetime) :red_circle: time(Date) :red_circle: time(Datetime) :white_check_mark: hour(Date) :white_check_mark: hour(Datetime) :white_check_mark: minute(Datetime) :white_check_mark: second(Datetime) :white_check_mark: fractionalseconds(Datetime) :red_circle: totaloffsetminutes(Datetime) :red_circle: totalseconds(Datetime) :white_check_mark: maxdatetime() :white_check_mark: now() :white_check_mark: mindatetime()","title":"Date and Time Functions"},{"location":"feature-support/#arithmetic-functions","text":":white_check_mark: ceiling(Number) :white_check_mark: floor(Number) :white_check_mark: round(Number)","title":"Arithmetic Functions"},{"location":"feature-support/#type-functions","text":":red_circle: cast(Type) :large_orange_diamond: cast(Expression, Type) :red_circle: isof(Type) :red_circle: isof(Expression, Type)","title":"Type Functions"},{"location":"feature-support/#geo-functions","text":"","title":"Geo Functions"},{"location":"feature-support/#geodistance","text":":red_circle: geo.distance(GeographyPoint, GeographyPoint) :red_circle: geo.distance(GeometryPoint, GeometryPoint)","title":"geo.distance"},{"location":"feature-support/#geointersects","text":":red_circle: geo.intersects(GeographyPoint, GeographyPolygon) :red_circle: geo.intersects(GeometryPoint, GeometryPolygon)","title":"geo.intersects"},{"location":"feature-support/#geolength","text":":red_circle: geo.length(GeographyLineString) :red_circle: geo.length(GeometryLineString)","title":"geo.length"},{"location":"feature-support/#conditional-functions","text":":red_circle: case(Edm.Boolean:expression, ..., Edm.Boolean:expression)","title":"Conditional Functions"},{"location":"feature-support/#lambda-operators","text":":red_circle: any(Symbol:Edm.Boolean:expression) :red_circle: all(Symbol:Edm.Boolean:expression)","title":"Lambda Operators"},{"location":"plugins/","text":"odatafy plugins This page provides a list of all Plugin, that are available for odatafy: Name Description Repo Documentation odatafy-mongodb Convert oData Requests to MongoDB aggregation queries []https://github.com/Gang-of-Fork/odatafy-mongodb","title":"Plugins"},{"location":"plugins/#odatafy-plugins","text":"This page provides a list of all Plugin, that are available for odatafy: Name Description Repo Documentation odatafy-mongodb Convert oData Requests to MongoDB aggregation queries []https://github.com/Gang-of-Fork/odatafy-mongodb","title":"odatafy plugins"},{"location":"url/","text":"","title":"URL Structure"}]}